{"version":3,"file":"index.js","mappings":";;;;;;;;;;;AAAa;AACb;AACA,6CAA6C;AAC7C;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,iCAAiC,mBAAO,CAAC,0BAAU;AACnD;AACA;AACA;AACA;AACA,4CAA4C,kCAAkC;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,gBAAgB,aAAoB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA,wCAAwC,kDAAkD;AAC1F;AACA;AACA;AACA,CAAC;AACD,eAAe;;;;;;;;;;;AC/EF;AACb;AACA,6CAA6C;AAC7C;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,+BAA+B,mBAAO,CAAC,sBAAQ;AAC/C;;;;;;;;;;;ACNa;AACb;AACA,6CAA6C;AAC7C;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gCAAgC,mBAAO,CAAC,wBAAS;AACjD,6BAA6B,mBAAO,CAAC,kBAAM;AAC3C,oCAAoC,mBAAO,CAAC,gCAAa;AACzD,6BAA6B,mBAAO,CAAC,kBAAM;AAC3C,2BAA2B,mBAAO,CAAC,cAAI;AACvC,6BAA6B,mBAAO,CAAC,kBAAM;AAC3C,+BAA+B,mBAAO,CAAC,oCAAa;AACpD;AACA;AACA;AACA;AACA;AACA,4CAA4C,qCAAqC;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,sCAAsC,aAAa;AACnD;AACA,oDAAoD,gBAAgB;AACpE,wDAAwD,gBAAgB;AACxE;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,2CAA2C,2CAA2C;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB,iBAAiB,qBAAqB;AACtC;AACA;AACA;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA;AACA,qCAAqC;AACrC,8BAA8B,aAAoB,IAAI,CAAa;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,eAAe;;;;;;;;;;;ACvGF;AACb;AACA,6CAA6C;AAC7C;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mBAAO,CAAC,wCAAa;AACrB,+BAA+B,mBAAO,CAAC,8CAAgB;AACvD,iCAAiC,mBAAO,CAAC,kDAAkB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACda;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qBAAqB;AACjC;AACA;AACA,gCAAgC;AAChC;AACA,eAAe;;;;;;;;;;;ACpBf;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;UEtBA;UACA;UACA;UACA","sources":["webpack://expres-server-architecture-boilerplate/./src/common/database.ts","webpack://expres-server-architecture-boilerplate/./src/common/env.ts","webpack://expres-server-architecture-boilerplate/./src/common/server.ts","webpack://expres-server-architecture-boilerplate/./src/index.ts","webpack://expres-server-architecture-boilerplate/./src/routes.ts","webpack://expres-server-architecture-boilerplate/external \"body-parser\"","webpack://expres-server-architecture-boilerplate/external \"cors\"","webpack://expres-server-architecture-boilerplate/external \"dotenv\"","webpack://expres-server-architecture-boilerplate/external \"express\"","webpack://expres-server-architecture-boilerplate/external \"http\"","webpack://expres-server-architecture-boilerplate/external \"mongoose\"","webpack://expres-server-architecture-boilerplate/external \"os\"","webpack://expres-server-architecture-boilerplate/external \"path\"","webpack://expres-server-architecture-boilerplate/webpack/bootstrap","webpack://expres-server-architecture-boilerplate/webpack/before-startup","webpack://expres-server-architecture-boilerplate/webpack/startup","webpack://expres-server-architecture-boilerplate/webpack/after-startup"],"sourcesContent":["\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar mongoose_1 = __importDefault(require(\"mongoose\"));\r\n/**\r\n * ## Database\r\n * Database class that is responsible for the creation of the main database \\\r\n * in this application. By initializing a new instance of this class, database \\\r\n * is created and must be started with the {@link Database.connect connect  } method.\r\n * @class Database\r\n */\r\nvar Database = /** @class */ (function () {\r\n    function Database() {\r\n        /**\r\n         * ### Mongoose connection options\r\n         * @type {mongoose.ConnectOptions}\r\n         */\r\n        this.options = {\r\n            useNewUrlParser: true,\r\n            useUnifiedTopology: true,\r\n            useCreateIndex: true,\r\n            useFindAndModify: false,\r\n        };\r\n    }\r\n    /**\r\n     * ### getConnectionString\r\n     * Get the connection string for the database corresponding to the current environment.\r\n     *\r\n     * Available environments:\r\n     * - `development`\r\n     * - `test`\r\n     * - `production`\r\n     *\r\n     * Specifiy the environment with the `NODE_ENV` environment variable.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    Database.prototype.getConnectionString = function () {\r\n        switch (process.env.NODE_ENV) {\r\n            case 'development':\r\n                return 'mongodb://localhost/dbname-dev';\r\n            case 'production':\r\n                return (process.env.MONGODB_URI ||\r\n                    'mongodb://localhost:27017/dbname-prod');\r\n            default:\r\n                return 'mongodb://localhost/dbname-test';\r\n        }\r\n    };\r\n    /**\r\n     * ### connect\r\n     * Connect to the database with the calculated connectionstring, \\\r\n     * and retrieve a mongoose connection object.\r\n     *\r\n     * ```typescript\r\n     * // Start database\r\n     * const database = new Database();\r\n     * database.connect();\r\n     * ```\r\n     *\r\n     * @returns {mongoose.Connection}\r\n     */\r\n    Database.prototype.connect = function () {\r\n        var connectionString = this.getConnectionString();\r\n        mongoose_1.default\r\n            .connect(connectionString, this.options)\r\n            .then(function () {\r\n            console.info(\"*** Connected to database: \" + connectionString);\r\n        })\r\n            .catch(function (err) {\r\n            console.error(\"*** Failed to connect to database: \" + connectionString, err);\r\n        });\r\n        var db = mongoose_1.default.connection;\r\n        db.on('error', function (err) { return console.log('*** Database error: ', err); });\r\n        return db;\r\n    };\r\n    return Database;\r\n}());\r\nexports.default = Database;\r\n","\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar dotenv_1 = __importDefault(require(\"dotenv\"));\r\ndotenv_1.default.config();\r\n","\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar express_1 = __importDefault(require(\"express\"));\r\nvar cors_1 = __importDefault(require(\"cors\"));\r\nvar body_parser_1 = __importDefault(require(\"body-parser\"));\r\nvar path_1 = __importDefault(require(\"path\"));\r\nvar os_1 = __importDefault(require(\"os\"));\r\nvar http_1 = __importDefault(require(\"http\"));\r\nvar routes_1 = __importDefault(require(\"@src/routes\"));\r\nvar root = path_1.default.normalize(__dirname + '/../..');\r\n/**\r\n * ## ExpressServer\r\n * Server class that is responsible for the creation of the express server used \\\r\n * in this application. By initializing a new instance of this class, the express server \\\r\n * is created and must be started with the {@link ExpressServer.listen listen  } method.\r\n * @class ExpressServer\r\n */\r\nvar ExpressServer = /** @class */ (function () {\r\n    /**\r\n     * ### constructor\r\n     * Initializes the http server in the desired order.\r\n     * 1. Initialize the default middleware\r\n     * 2. Serve static files\r\n     * 3. Serve custom routes\r\n     * 4. Initialize error handler middleware\r\n     */\r\n    function ExpressServer() {\r\n        this.app = express_1.default();\r\n        this.initialize();\r\n        this.serveStatic();\r\n        this.serveRoutes();\r\n        this.initializeErrorHandlers();\r\n    }\r\n    /**\r\n     * ### initialize\r\n     * Initializes the default middleware configuration for the server.\r\n     * @returns {void}\r\n     */\r\n    ExpressServer.prototype.initialize = function () {\r\n        this.app.use(cors_1.default({ origin: '*' }));\r\n        this.app.use(express_1.default.json());\r\n        this.app.use(express_1.default.urlencoded({ extended: true }));\r\n        this.app.use(body_parser_1.default.urlencoded({ extended: true }));\r\n    };\r\n    /**\r\n     * ### serveStatic\r\n     * Serves static files from the root/static directory.\r\n     * @returns {void}\r\n     */\r\n    ExpressServer.prototype.serveStatic = function () {\r\n        this.app.use('/static', express_1.default.static(root + \"/static\"));\r\n    };\r\n    /**\r\n     * ### serveRoutes\r\n     * Serves custom routes from the routes directory.\r\n     * @returns {void}\r\n     */\r\n    ExpressServer.prototype.serveRoutes = function () {\r\n        routes_1.default(this.app);\r\n    };\r\n    /**\r\n     * ### initializeErrorHandlers\r\n     * Initializes the default error handlers for the server.\r\n     * @returns {void}\r\n     */\r\n    ExpressServer.prototype.initializeErrorHandlers = function () {\r\n        this.app.use(function (req, res) { return res.status(404).send('Not found'); });\r\n    };\r\n    /**\r\n     * ### listen\r\n     * Run a http server with the express app and listen on the specified port.\r\n     *\r\n     * ```typescript\r\n     * // Start server\r\n     * const port = 3000;\r\n     * const server = new Server();\r\n     * server.listen(port);\r\n     * ```\r\n     *\r\n     * @param  {number} port\r\n     * @returns {express.Application} express\r\n     */\r\n    ExpressServer.prototype.listen = function (port) {\r\n        /**\r\n         * ### welcome\r\n         * Generates a welcome message for the server log.\r\n         * @param  {number} p\r\n         * @returns void\r\n         */\r\n        var welcome = function (p) { return function () {\r\n            var environment = process.env.NODE_ENV || 'development';\r\n            var device = os_1.default.hostname();\r\n            var message = \"*** Server running in: \" + environment + \" @: \" + device + \" on port: \" + p;\r\n            console.log(message);\r\n        }; };\r\n        http_1.default.createServer(this.app).listen(port, welcome(port));\r\n        return this.app;\r\n    };\r\n    return ExpressServer;\r\n}());\r\nexports.default = ExpressServer;\r\n","\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nrequire(\"@common/env\");\r\nvar server_1 = __importDefault(require(\"@common/server\"));\r\nvar database_1 = __importDefault(require(\"@common/database\"));\r\n// Start server\r\nvar port = parseInt(process.env.PORT || '3000');\r\nvar server = new server_1.default();\r\nserver.listen(port);\r\n// Start database\r\nvar database = new database_1.default();\r\ndatabase.connect();\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * ## Routes\r\n * Configure the custom routes for the api application by \\\r\n * using the imported routers on their provided path.\r\n *\r\n * ```typescript\r\n * // Example usage\r\n * export default function routes(app: express.Application) {\r\n * \tapp.use('/api', apiRouter);\r\n * \tapp.use('/user', userRouter);\r\n * \tapp.use('/products', productRouter);\r\n * }\r\n * ```\r\n * @param  {express.Application} app\r\n */\r\nfunction routes(app) {\r\n    app.use('/', function () { });\r\n}\r\nexports.default = routes;\r\n","module.exports = require(\"body-parser\");","module.exports = require(\"cors\");","module.exports = require(\"dotenv\");","module.exports = require(\"express\");","module.exports = require(\"http\");","module.exports = require(\"mongoose\");","module.exports = require(\"os\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/index.ts\");\n",""],"names":[],"sourceRoot":""}